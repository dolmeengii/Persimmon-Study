package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class boj_1043 {
	
	static boolean[] tf1 ,tf2;
	static int N , M;
	static ArrayList<ArrayList<Integer>> arrList1, arrList2;
	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine() , " ");
		
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		
		st = new StringTokenizer(br.readLine(), " ");
		
		int num = Integer.parseInt(st.nextToken());
		
		tf1 = new boolean[N+1];
		tf2 = new boolean[M];
		
		int[] arr = new int[num];
		
		for (int i = 0; i < num; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}
		
		arrList1 = new ArrayList<ArrayList<Integer>>();
		arrList2 = new ArrayList<ArrayList<Integer>>();
		
		for(int i = 0; i < M; i++) {
			arrList1.add(new ArrayList<Integer>());
		}
		
		for(int i = 0; i < N+1; i++) {
			arrList2.add(new ArrayList<Integer>());
		}
		
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int p = Integer.parseInt(st.nextToken());
			for(int j = 0; j < p; j++) {
				int tem = Integer.parseInt(st.nextToken());
				arrList1.get(i).add(tem);
				arrList2.get(tem).add(i);
			}
		}
		
		for (int i = 0; i < num; i++) {
			tf1[arr[i]] = true;
			fn(arr[i]);
		}
		
		int cnt = 0;
		for(int i = 0; i < M; i++) {
			if(!tf2[i]) {
				cnt++;
			}
		}
		System.out.println(cnt);
	}
	private static void fn(int person) {
		ArrayList<Integer> arr = arrList2.get(person);
		for(int i = 0; i < arr.size(); i++) {
			int party = arr.get(i);
			if(!tf2[party]) {
				tf2[party] = true;
				ArrayList<Integer> tem = arrList1.get(party);
				for(int j = 0; j < tem.size(); j++) {
					int pp = tem.get(j);
					if(!tf1[pp]) {
						tf1[pp] = true;
						fn(pp);
					}
				}
			}
		}
		
	}

}
