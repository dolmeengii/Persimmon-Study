package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


public class boj_10868_최솟값 {

	static class SegementTree{
		int treeSize;
		long[] tree;
		
		public SegementTree(int arrSize) {
			int H = (int)Math.ceil(Math.log(arrSize)/Math.log(2));
			this.treeSize = (int)Math.pow(2, H+1);
			this.tree = new long[treeSize];
		}
		
		public long init(long[] arr, int node, int start, int end) {
			if (start == end) {
				return tree[node] = arr[start];
			}
			
			long a = init(arr, node*2, start, (start+end)/2);
			long b = init(arr, node*2+1, (start+end)/2+1, end);
			
			return tree[node] = Math.min(a, b);
		}
		
		public long min(int node , int start, int end , int left, int right) {
			
			if (start > right || end < left) return Integer.MAX_VALUE;
			
			if (start >= left && end <= right) {
				return tree[node];
			}
			
			long a = min(node*2, start, (start+end)/2 ,left, right);
			long b = min(node*2+1, (start+end)/2+1, end, left, right);
			
			return Math.min(a, b);
			
		}
		
	}
	
	static long[] arr;
	
	public static void main(String[] args)throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringBuilder sb = new StringBuilder();
		
		StringTokenizer st = new StringTokenizer(br.readLine() , " ");
		
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
				
		arr = new long[N+1];
		
		for (int i = 1; i <= N; i++) {
			arr[i] = Integer.parseInt(br.readLine());
		}
		
		SegementTree sTree = new SegementTree(N);
		
		sTree.init(arr, 1, 1, N);
		
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine() , " ");
			long tem = sTree.min(1, 1, N, Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
			sb.append(tem).append("\n");
		}
		System.out.println(sb);
	}

}
