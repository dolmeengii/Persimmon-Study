package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class boj_10999_구간합구하기2 {
	
	static class SegementTree{
		int treeSize;
		long[] tree;
		long[] lazy;
		
		public SegementTree(int size) {
			int h = (int) Math.ceil(Math.log(size) / Math.log(2));
			this.treeSize = (int) Math.pow(2, h+1);
			this.tree = new long[treeSize];
			this.lazy = new long[treeSize];
		}

		public long init(long[] arr, int node, int start, int end) {
	
			if(start == end) {
				return tree[node] = arr[start];
			}else {
				return tree[node] = init(arr , node*2, start, (start+end)/2) + init(arr , node*2+1 , (start+end)/2+1 , end);
			}
	
		}
		
		public void lazyUpdate(int node, int start, int end) {
			if(lazy[node] != 0) {
				tree[node] += (lazy[node]*(end-start+1));
				
				if(start != end) {
					lazy[node*2] += lazy[node];
					lazy[node*2+1] += lazy[node];
				}
				
				lazy[node] = 0;
			}
		}
		
		public void update(int node, int start, int end , int left , int right, long diff) {
			
			lazyUpdate(node, start, end);
			
			if(start > right || end < left) return;
			
			if (start >= left && end <= right) {
				
				tree[node] += diff*(end-start+1);
				
				if(start != end) {
					lazy[node*2] += diff;
					lazy[node*2+1] += diff;
				}
				
				return;
			}
			
			update(node*2, start, (start+end)/2 ,left, right, diff);
			update(node*2+1,(start+end)/2+1, end, left, right, diff);
			tree[node] = tree[node*2] + tree[node*2+1];
			
		}
		
		public long sum(int node, int start, int end , int left , int right) {
			
			lazyUpdate(node, start, end);
			
			if(start > right || end < left ) return 0;
			
			if(left <= start && right >= end) {
				return tree[node];
			}
			
			return sum(node*2, start, (start+end)/2 ,left, right) + sum(node*2+1,(start+end)/2+1, end, left, right);
			
		}
		
	}
	
	static int N, M, K;
	static long[] arr;
	
	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		
		arr = new long[N+1];
		
		for (int i = 1; i <= N; i++) {
			arr[i] = Long.parseLong(br.readLine());
		}
		
		SegementTree sTree = new SegementTree(N);
		
		sTree.init(arr, 1, 1, N);

		
		for (int i = 0; i < M+K; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			
			if(Integer.parseInt(st.nextToken()) == 1) {
				sTree.update(1, 1, N, Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Long.parseLong(st.nextToken()));
			}else {
				sb.append(sTree.sum(1, 1, N, Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()))).append("\n");
			}
			
		}
		
		System.out.println(sb);
	}

}
