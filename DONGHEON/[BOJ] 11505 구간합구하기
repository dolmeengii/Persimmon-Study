package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class boj_11505_구간곱구하기 {
	
	static class SegementTree{
		int treeSize;
		long[] tree;
		
		public SegementTree(int arrSize) {
			int H = (int) Math.ceil(Math.log(arrSize)/Math.log(2));
			this.treeSize = (int) Math.pow(2, H+1);
			this.tree = new long[treeSize];
		}
		
		public long init(int node , int start , int end) {
			
			if(start == end) {
				return tree[node] = arr[start];
			}else {
				return tree[node] = (init(node*2 , start , (start+end)/2)
						* init(node*2 + 1 , (start+end)/2+1 , end))%1000000007;
			}
					
		}
		
		public long product(int node , int start , int end, int left , int right) {
			
			if( start > right || end < left ) {
				return 1;
			}
			
			if( start >= left && end <= right ) {
				return tree[node];
			}
			return (product(node*2 , start , (start+end)/2 , left , right)
					* product(node*2+1 , (start+end)/2 +1 , end , left , right))%1000000007;
			
		}		
		
		public long update(int node , int start , int end , int idx , long diff) {
			
			if (start > idx || end < idx) return tree[node];
			
			if(start == end) return tree[node] = diff;

			return tree[node] = (update(node*2 , start , (start+end)/2 ,idx , diff)
						* update(node*2 + 1 , (start+end)/2+1 , end, idx , diff))%1000000007;
			
		}
		
	}
	
	static long[] arr;
	static int N, M ,K;
	
	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		
		arr = new long[N+1];
		
		for (int i = 1; i <= N; i++) {
			arr[i] = Long.parseLong(br.readLine());
		}
		
		SegementTree sTree = new SegementTree(N);
		
		sTree.init(1, 1, N);

		
		for (int i = 0; i < M+K; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			
			if(Integer.parseInt(st.nextToken()) == 1) {
				int a = Integer.parseInt(st.nextToken());
				long b =  Long.parseLong(st.nextToken());
				arr[a] = b;
				sTree.update(1, 1, N, a, b);
			}else {
				sb.append(sTree.product(1, 1, N, Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()))).append("\n");
			}
			
		}
		
		System.out.println(sb);
	}

}
