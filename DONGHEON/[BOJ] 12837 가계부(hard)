package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

import BOJ.boj_2268_segement.SegementTree;

public class boj_12837_가계부 {
	static class SegementTree{
		long[] tree;
		int treeSize;
		
		public SegementTree(int arrSize) {
			
			int h = (int) Math.ceil(Math.log(arrSize)/(Math.log(2)));
			this.treeSize = (int) (Math.pow(2 , h+1));
			this.tree = new long[treeSize];
			
		}
		
		public long init(long[] arr , int node , int start , int end) {
			
			if(start == end) {
				return tree[node] = arr[start];
			}else {
				return tree[node] = init(arr , node*2 , start , (start+end)/2)
						+ init(arr , node*2 + 1 , (start+end)/2+1 , end);
			}
					
		}
		
		public long sum(int node , int start , int end, int left , int right) {
			
			if( start > right || end < left ) {
				return 0;
			}
			
			if( start >= left && end <= right ) {
//				System.out.println(" node : " + node + " sum : " + tree[node]);
				return tree[node];
			}
			return sum(node*2 , start , (start+end)/2 , left , right)
					+ sum(node*2+1 , (start+end)/2 +1 , end , left , right);
			
		}
		
		public void update(int node , int start , int end , int idx , long diff) {
			
			if (start > idx || end < idx) return ;
			
			tree[node] += diff;
			
			if(start != end) {
				
				update(node*2 , start , (start + end)/2 , idx , diff);
				update(node*2+1 , (start + end)/2+1 , end , idx , diff);
				
			}
			
		}
		
	}
	
	static int N , Q;
	static long[] arr;

	public static void main(String[] args)throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringBuilder sb = new StringBuilder();
		
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		N = Integer.parseInt(st.nextToken());
		Q = Integer.parseInt(st.nextToken());
		
		SegementTree sTree = new SegementTree(N);
		
//		arr = new long[N+1];
		
		for(int i = 0; i < Q; i++) {
			st = new StringTokenizer(br.readLine() , " ");
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			long c = Integer.parseInt(st.nextToken());
			
			if(a == 2) {
				sb.append(sTree.sum(1, 1, N, b, (int)c)).append("\n");
			}else {
//				arr[b] += c;
				sTree.update(1, 1, N, b, c);
			}
			
		}
		
		System.out.println(sb);
		
	}

}
