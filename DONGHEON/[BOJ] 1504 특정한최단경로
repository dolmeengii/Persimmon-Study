package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class boj_1504_특정한최단경로 {
	static class node implements Comparable<node> {
	    int point;
	    int weight;
	 
	    public node(int point, int weight) {
	        this.point = point;
	        this.weight = weight;
	    }
	 
	    @Override
	    public int compareTo(node o) {
	        return this.weight - o.weight;
	    }
	 
	}
	
    static int N, E;
    static ArrayList<node>[] list; 
    static int[] dist; 
    static boolean[] check; 
    static int INF = 1601000;

	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());
 
        list = new ArrayList[N+1];
        dist = new int[N + 1];
        check = new boolean[N + 1];
        
        Arrays.fill(dist, INF);
 
        for (int i = 0; i <= N; i++) {
            list[i]= new ArrayList<>();
        }
        
        for (int i = 0; i < E; i++) {
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            int weight = Integer.parseInt(st.nextToken());
 
            list[start].add(new node(end, weight));
 
            list[end].add(new node(start, weight));
        }
        
        st = new StringTokenizer(br.readLine());
        int v1 = Integer.parseInt(st.nextToken());
        int v2 = Integer.parseInt(st.nextToken());
        
        int res1 = 0;
        res1 += dijkstra(1, v1);
        res1 += dijkstra(v2, N);
        
        int mid = 0;
        mid = dijkstra(v1, v2);
        
        int res2 = 0;
        res2 += dijkstra(1, v2);
        res2 += dijkstra(v1, N);
        
        res1 += mid;
        res2 += mid;
        int ans = (res1>= INF && res2>= INF) ? -1 : Math.min(res1, res2);
        System.out.println(ans);
        
	}
	
    public static int dijkstra(int start, int end) {
        Arrays.fill(dist, INF);
        Arrays.fill(check, false);
 
        PriorityQueue<node> pq = new PriorityQueue<>();
        boolean[] check = new boolean[N + 1];
        pq.offer(new node(start, 0));
        dist[start] = 0;
 
        while (!pq.isEmpty()) {
            node curNode = pq.poll();
            int cur = curNode.point;
 
            if (!check[cur]) {
                check[cur] = true;
 
                for (node n: list[cur]) {
                    if (!check[n.point] && dist[n.point] > dist[cur] + n.weight) {
                        dist[n.point] = dist[cur] + n.weight;
                        pq.add(new node(n.point, dist[n.point]));
                    }
                }
            }
        }
 
        return dist[end];
    }

}
