import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static class node implements Comparable<node>{
		int point;
		int time;
		public node(int point , int time){
			this.point = point;
			this.time = time;
		}
		
		@Override
		public int compareTo(node o) {
			return this.time - o.time;
		}
	}
	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine() , " ");
		
		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		
		boolean[] tf = new boolean[100001];
		
		PriorityQueue<node> pq = new PriorityQueue<>();
		
		if(N >= K) {
			System.out.println(N-K);
		}else {
			pq.add(new node(N, 0));
			while (!pq.isEmpty()) {
				node nn = pq.poll();
				int p = nn.point;
				tf[p] = true;
			
				if(p == K) {
					System.out.println(nn.time);
					break;
				}
				
				if (p*2 < 100001  && !tf[p*2]) {
					pq.add(new node(p*2, nn.time+1));
				}
				if (p+1 < 100001  && !tf[p+1]) {
					pq.add(new node(p+1, nn.time+1));
				}
				
				if (p-1 >= 0 && !tf[p-1]) {
					pq.add(new node(p-1, nn.time+1));
				}		
			}
		}		
	}
}
