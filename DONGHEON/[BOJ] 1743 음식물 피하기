import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int N,M,K,ans,temp;
	static int[] dR= {-1,1,0,0};
	static int[] dC= {0,0,-1,1};
	static boolean[][] map;
	static boolean[][] visited;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		
		map = new boolean[N][M];
		visited = new boolean[N][M];
		
		for (int i = 0; i < K; i++) {
			st = new StringTokenizer(br.readLine());
			int r = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			map[r-1][c-1]=true;
		}
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(!visited[i][j] && map[i][j]) {
					temp=0;
					dfs(i,j);
					ans = Math.max(ans, temp);
				}
			}
		}
		System.out.println(ans);
		
	}

	private static void dfs(int r, int c) {
		temp++;
		visited[r][c]=true;
		for (int k = 0; k < 4; k++) {
			int nr = r+dR[k];
			int nc = c+dC[k];
			
			if(nr<0 || nc<0 || nr>=N || nc>=M)continue;
			if(!visited[nr][nc]&& map[nr][nc]) {
				dfs(nr,nc);
			}
		}
	}
}
