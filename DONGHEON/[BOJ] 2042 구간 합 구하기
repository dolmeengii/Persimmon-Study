package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class boj_2042 {
	
	static class SegmentTree{
		long[] tree;
		int treeSize;
		
		public SegmentTree(int arrSize) {
			int h = (int) Math.ceil(Math.log(arrSize) / Math.log(2));
			this.treeSize = (int) Math.pow(2, h+1);
			tree = new long[treeSize];
		}
		
		public long init(long[] arr, int node, int start, int end) { // 구간합 트리
			if(start == end) {
				return tree[node] = arr[start];
			}
			
			return tree[node] = init(arr, node*2,start,(start+end)/2) + init(arr,node*2+1,(start+end)/2+1,end);
		}
		
		public long sum(int node, int start , int end, int left , int right) { // 합 계산
			if(left > end || right < start) return 0;
			
			if(left <= start && right >= end) return tree[node];
			
			return sum(node*2 , start , (start+end)/2 , left, right) + sum (node*2+1 , (start+end)/2+1 , end , left, right);
			
		}
		
		public void update(int node, int start , int end ,int idx , long diff) {
			if (idx < start || idx > end) return;
			
			tree[node] += diff;
			
			if(start != end) { // start end idx가 2 2 2 인경우 계속 실행 됨으로 필요
				update(node*2, start, (start+end)/2, idx ,diff);
				update(node*2+1, (start+end)/2+1, end, idx ,diff);			
			}
			
		}
		
	}
	
	static long[] arr;

	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringBuilder sb = new StringBuilder();
		
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		
		arr = new long[N+1];
		
		for (int i = 1; i <= N; i++) {
			long num = Long.parseLong(br.readLine());
			arr[i] = num;
		}
		
		SegmentTree sTree = new SegmentTree(N);
		sTree.init(arr, 1, 1, N);
		
		for (int i = 0; i < M+K; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			long c = Long.parseLong(st.nextToken());
			
			if (a == 1) {	
				sTree.update(1, 1, N, b, c-arr[b]);
				arr[b] = c;
			}else {
				sTree.sum(1, 1, N, b, (int)c);
				sb.append(sTree.sum(1, 1, N, b, (int)c)).append("\n");
			}
			
		}
		
		System.out.println(sb);
		
		
	}

}
