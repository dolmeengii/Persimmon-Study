package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class boj_2194_유닛이동시키기2 {
	
	static class node{
		int r;
		int c;
		int cnt;
		public node(int r , int c, int cnt) {
			this.r = r;
			this.c = c;
			this.cnt = cnt;			
		}
	}
	
	static int N, M, A, B, K ,endR ,endC;
	static int[] dr = {1,0,-1,0};
	static int[] dc = {0,1,0,-1};
	static int[][] map;
	static boolean[][] check;
	static int result = -1;

	public static void main(String[] args)throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine() , " ");
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		A = Integer.parseInt(st.nextToken());
		B = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		check = new boolean[N][M];
		
		for (int i = 0; i < K; i++) {
			st = new StringTokenizer(br.readLine(), " ");			
			int temR = Integer.parseInt(st.nextToken())-1;
			int temC = Integer.parseInt(st.nextToken())-1;
			
			map[temR][temC] = 1;
			
		}
		
		st = new StringTokenizer(br.readLine(), " ");			
		int startR = Integer.parseInt(st.nextToken())-1;
		int startC = Integer.parseInt(st.nextToken())-1;
		
		st = new StringTokenizer(br.readLine(), " ");			
		endR = Integer.parseInt(st.nextToken())-1;
		endC = Integer.parseInt(st.nextToken())-1;
		
		check[startR][startC] = true;
		
		
		for (int j = 0; j < A; j++) {
			for (int k = 0; k < B; k++) {
				int temr = startR + j;
				int temc = startC + k;
				if(map[temr][temc] == 1) {
					System.out.println(-1);
					return;
				}
			}
		}
		
		bfs(startR , startC);
		
		System.out.println(result);
	}

	private static void bfs(int r, int c) {
		
		Queue<node> que = new LinkedList<node>(); 
		
		que.add(new node(r, c, 0));
		
		while (!que.isEmpty()) {
			node nn = que.poll();
			
			if(nn.r == endR && nn.c == endC) {
				result = nn.cnt;
				return;
			}
			
			loop:
			for(int i = 0; i < 4; i++) {
				int nr = nn.r + dr[i];
				int nc = nn.c + dc[i];
				if(nr <= N-A && nr >= 0 && nc >= 0 && nc <= M-B && !check[nr][nc] && map[nr][nc] == 0) {
					check[nr][nc] = true;
					for (int j = 0; j < A; j++) {
						for (int k = 0; k < B; k++) {
							int temr = nr + j;
							int temc = nc + k;
							if(map[temr][temc] == 1) {
								continue loop;
							}
						}
					}
					que.add(new node(nr, nc, nn.cnt+1));
				}
			}	
		}
	}
}
