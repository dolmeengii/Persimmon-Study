import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static class box implements Comparable<box>{
		int r;
		int c;
		int len;
		public box(int r, int c, int len) {
			this.r = r;
			this.c = c;
			this.len =len;
		}
		@Override
		public int compareTo(box o) {
			return this.len - o.len;
		}
	}
	static int r , c ,res;
	static char[][] map;
	static boolean[][] tf,tf2;
	static box tem;
	static int[] dirR = {0,1,0,-1};
	static int[] dirC = {1,0,-1,0};
	public static void main(String[] args)throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());
		res = 0;
		
		map = new char[r][c];
		tf = new boolean[r][c];
		
		for(int i = 0; i < r; i++) {
			String str = br.readLine();
			for(int j = 0; j < c; j++) {
				map[i][j] = str.charAt(j);
			}
		}
		
		for(int i = 0; i < r; i++) {
			for(int j = 0; j < c; j++) {
				if(map[i][j] == 'L' &&!tf[i][j]) {
					tf[i][j] = true;
					bfs(i , j);
					tf2 = new boolean[r][c];
					bfs2(tem);
				}
			}
		}
		
		System.out.println(res);
		
	}
	private static void bfs(int row, int col) {
		
		PriorityQueue<box> pq = new PriorityQueue<>();
		
		pq.add(new box(row, col, 0));
		
		while(!pq.isEmpty()) {
			box temB = pq.poll();
			
			for(int i =0; i < 4; i++) {
				int nr = temB.r+dirR[i];
				int nc = temB.c+dirC[i];
				if(nr >= 0 && nr < r && nc >= 0 && nc < c && map[nr][nc] == 'L' && !tf[nr][nc]) {
					tf[nr][nc] = true;
					pq.add(new box(nr, nc, temB.len+1));
				}
			}
			if(pq.isEmpty()) {
				tem = temB;
			}
		}
		
	}

	private static void bfs2(box b) {
		PriorityQueue<box> pq = new PriorityQueue<>();
//		System.out.println(" 끝점 r : " + b.r + "끝점 c : " + b.c);
		tf2[b.r][b.c] = true;
		pq.add(new box(b.r, b.c, 0));
		
		while(!pq.isEmpty()) {
			box temB = pq.poll();
			
			for(int i =0; i < 4; i++) {
				int nr = temB.r+dirR[i];
				int nc = temB.c+dirC[i];
				if(nr >= 0 && nr < r && nc >= 0 && nc < c && map[nr][nc] == 'L' && !tf2[nr][nc]) {
					tf2[nr][nc] = true;
					pq.add(new box(nr, nc, temB.len+1));
				}
			}
			if(pq.isEmpty() && res < temB.len) {
//				System.out.println(res);
				res = temB.len;
//				System.out.println(res);
				
			}
		}
		
	}
}
