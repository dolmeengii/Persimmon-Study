package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class boj_5676_음주코딩 {
	
	static class SegementTree{
		int treeSize;
		long[] tree;
		
		public SegementTree(int arrSize) {
			int H = (int) Math.ceil(Math.log(arrSize)/Math.log(2));
			this.treeSize = (int) Math.pow(2, H+1);
			this.tree = new long[treeSize];
		}
		
		public long init(int node , int start , int end) {
			
			if(start == end) {
				return tree[node] = arr[start];
			}else {
				return tree[node] = (init(node*2 , start , (start+end)/2)
						* init(node*2 + 1 , (start+end)/2+1 , end))%1000000007;
			}
					
		}
		
		public long product(int node , int start , int end, int left , int right) {
			
			if( start > right || end < left ) {
				return 1;
			}
			
			if( start >= left && end <= right ) {
				return tree[node];
			}
			return (product(node*2 , start , (start+end)/2 , left , right)
					* product(node*2+1 , (start+end)/2 +1 , end , left , right))%1000000007;
			
		}		
		
		public long update(int node , int start , int end , int idx , long diff) {
			
			if (start > idx || end < idx) return tree[node];
			
			if(start == end) return tree[node] = diff;

			return tree[node] = (update(node*2 , start , (start+end)/2 ,idx , diff)
						* update(node*2 + 1 , (start+end)/2+1 , end, idx , diff))%1000000007;
			
		}
		
	}
	
	static long[] arr;
	static int N, K;
	
	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		String input = "";

		StringBuilder sb = new StringBuilder();

		while((input = br.readLine()) != null) {
			
			StringTokenizer st = new StringTokenizer(input, " ");
			
			N = Integer.parseInt(st.nextToken());
			K = Integer.parseInt(st.nextToken());
			
			arr = new long[N+1];
			
			st = new StringTokenizer(br.readLine() , " ");
			
			for (int i = 1; i <= N; i++) {
				long tem = Long.parseLong(st.nextToken());
				if (tem < 0) {
					tem = -1;
				}else if (tem == 0) {
					tem = 0;
				}else {
					tem = 1;
				}
				arr[i] = tem;
			}
			
			SegementTree sTree = new SegementTree(N);
			
			sTree.init(1, 1, N);
			
			
			for (int i = 0; i < K; i++) {
				st = new StringTokenizer(br.readLine(), " ");
				String op = st.nextToken();
				if(op.equals("C")) {
					int a = Integer.parseInt(st.nextToken());
					long b = Long.parseLong(st.nextToken());
					if (b < 0) {
						b = -1;
					}else if (b == 0) {
						b = 0;
					}else {
						b = 1;
					}
					arr[a] = b;
					sTree.update(1, 1, N, a, b);
				}else {
					long a = sTree.product(1, 1, N, Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
					if (a < 0) {
						sb.append("-");
					}else if(a == 0) {
						sb.append("0");
					}else {
						sb.append("+");
					}
				}
				
			}
			sb.append("\n");
		};
		System.out.println(sb);
		
		
	}

}
