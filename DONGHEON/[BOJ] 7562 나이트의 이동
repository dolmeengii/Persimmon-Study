package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class boj_7562 {
	static class node{
		int r;
		int c;
		int cnt;
		public node(int r , int c , int cnt){
			this.r = r;
			this.c = c;
			this.cnt = cnt;
		}
	}
	static int[] dirX = {1 , 2 , 1 , 2 , -1 , -2 , -1 , -2};
	static int[] dirY = {2 , 1 , -2 , -1 , -2 , -1 , 2 , 1};
	static boolean[][] tf;
	static int[][] map;
	static int res , N , endR , endC;
	public static void main(String[] args)throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int test_case = Integer.parseInt(br.readLine());
		
		StringBuilder sb = new StringBuilder();
		
		for (int i = 0; i < test_case; i++) {
			
			N = Integer.parseInt(br.readLine());
			
			map = new int[N][N];
			tf = new boolean[N][N];
			res = Integer.MAX_VALUE;
			
			StringTokenizer st = new StringTokenizer(br.readLine() , " ");
			int startR = Integer.parseInt(st.nextToken());
			int startC = Integer.parseInt(st.nextToken());
			
			st = new StringTokenizer(br.readLine() , " ");
			
			endR = Integer.parseInt(st.nextToken());
			endC = Integer.parseInt(st.nextToken());

			
			tf[startR][startC] = true;
			Queue<node> que = new LinkedList<>();
			que.add(new node(startR , startC , 0));
			if(startR == endR && startC == endC) {
				res = 0;
			}else {
				flag: 
				while (!que.isEmpty()) {
					node nn = que.poll();
					
					for (int j = 0; j < 8; j++) {
						int nR = nn.r + dirX[j];
						int nC = nn.c + dirY[j];
						if(nR >= 0 && nR < N && nC >= 0 && nC < N && !tf[nR][nC]) {
							if( nR == endR && nC == endC) {
								res = nn.cnt+1;
								break flag;
							}
							tf[nR][nC] = true;
							que.add(new node(nR ,nC , nn.cnt+1));
						}
					}
				}				
			}
			
			sb.append(res+"\n");
		}
		System.out.println(sb);
		
	}
	private static void dfs(int R, int C, int cnt) {
		System.out.println(cnt);
		if (cnt >= res) {
			return;
		}
		
		if( R == endR && C == endC) {
			System.out.println(cnt);
			res = cnt;
			return;
		}
		
		for (int i = 0; i < 8; i++) {
			int nR = R + dirX[i];
			int nC = C + dirY[i];
//			System.out.println("nR : " + nR + " nC : " + nC);
			if(nR >= 0 && nR < N && nC >= 0 && nC < N && !tf[nR][nC]) {
				System.out.println("여기가 nR : " + nR + " nC : " + nC);
				tf[nR][nC] = true;
				dfs(nR ,nC , cnt+1);
			}
		}
		
		
	}

}
