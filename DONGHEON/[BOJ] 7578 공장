package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class boj_7578_공장 {
	
	static class pair implements Comparable<pair>{
		int A;
		int B;
		
		public pair(int A, int B) {
			this.A = A;
			this.B = B;
		}
		
		@Override
		public int compareTo(pair o) {
			if (this.A == o.A) {
				return this.B -o.B;
			}
			
			return this.A - o.A;
		}
		
	}
	
	static class SegementTree{
		int treeSize;
		long[] tree;
		
		public SegementTree(int arrSize) {
			int h = (int) Math.ceil(Math.log(arrSize)/Math.log(2));
			this.treeSize = (int)Math.pow(2,h+1);
			this.tree = new long[treeSize];
		}
		
		public long sum(int node,int start, int end, int left, int right) {
			if (start > right || end < left) return 0;
			
			if (start >= left && end <= right) return tree[node];
			
			return sum(node*2, start, (start+end)/2, left, right)
					+ sum(node*2 + 1, (start+end)/2 +1, end, left, right);
		}
		
		public void update(int node, int start ,int end, int idx) {
			if(start > idx || end < idx) return;
			
			tree[node]++;
			
			if(start == idx) return;
			
			update(node*2, start, (start+end)/2, idx);
			update(node*2+1, (start+end)/2+1, end, idx);
			
		}
		
	}
	static int N;
	static long result;
	static PriorityQueue<pair> pq;
	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		N = Integer.parseInt(st.nextToken());
		
		pq = new PriorityQueue<pair>();
		
		SegementTree sTree = new SegementTree(N);
		
		
		st = new StringTokenizer(br.readLine(), " ");
		HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
		
		for (int i = 1; i <= N; i++) {
			hm.put(Integer.parseInt(st.nextToken()), i);
		}
		
		st = new StringTokenizer(br.readLine(), " ");
		
		for (int i = 1; i <= N; i++) {
			int tem = hm.get(Integer.parseInt(st.nextToken()));
			pq.add(new pair(tem, i));
		}
		
				
		result = 0;
		
		for (int i = 0; i < N; i++) {
			pair tem = pq.poll();
			
			result += sTree.sum(1, 1, N, tem.B+1, N);
			sTree.update(1, 1, N, tem.B);
			
		}
		
		System.out.println(result);
	}

}
