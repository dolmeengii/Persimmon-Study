import java.util.*;
class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        
        
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        
        for(int i = 0; i < scoville.length; i++){
            pq.add(scoville[i]);
        }
        
        while(pq.size() != 1){
            int a = pq.poll();
            if(a >= K) return answer;
            int b = pq.poll();
            answer++;
            int c = a + b*2;
            
            if(!pq.isEmpty() && c >= K && pq.peek() >= K) return answer;
            
            pq.add(c);
        }
        
        if(pq.peek() >= K ) return answer;
        else return -1;
        
    }
}

// 좀 더 깔끔하게 짜여진 코드가 있어서 차용해와서 고친 코드

import java.util.*;
class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        
        
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        
        for(int i = 0; i < scoville.length; i++){
            pq.add(scoville[i]);
        }
        
        while(pq.size() != 1 && pq.peek() < K){
            int a = pq.poll();
            int b = pq.poll();
            answer++;
            
            pq.add(a + b*2);
        }
        
        if(pq.peek() >= K ) return answer;
        else return -1;
        
    }
}
