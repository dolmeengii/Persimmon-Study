import java.util.*;

class Solution {
    static int[] countArr = new int[10];
    static Queue<Map<Integer, Integer>> queue = new LinkedList<>();
    
    public int solution(int[] priorities, int location) {
        int answer = 0;
        
        setCountArr(priorities);
        
        return runProcess(priorities, location, answer);
    }
    
    public void setCountArr(int[] priorities){
        for(int i = 0; i < priorities.length; i++){
            Map<Integer, Integer> map = new HashMap<>();
            
            countArr[priorities[i]]++;
            map.put(i, priorities[i]);
        
            queue.offer(map);
        }
    }
    
    public int runProcess(int[] priorities, int location, int answer){
        for(int i = 0; i < countArr.length; i++){
            for(int j = 0; j < priorities.length; j++){
                int priorityCnt = countArr[countArr.length-i-1];
                int priority = countArr.length-i-1;
            
                if(priorityCnt == 0) continue;
            
                Map<Integer, Integer> poll = queue.poll();
                
                if(poll.containsKey(location) && poll.containsValue(priority))
                    return ++answer;
                
                if(!poll.containsValue(priority)) {
                    queue.offer(poll);
                    continue;
                } else {
                    answer++;
                    countArr[priority]--;
                }
            }
        }
        return answer;
    }
}
